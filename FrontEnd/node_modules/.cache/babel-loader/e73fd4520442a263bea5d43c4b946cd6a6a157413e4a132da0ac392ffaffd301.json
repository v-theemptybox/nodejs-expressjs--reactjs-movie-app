{"ast":null,"code":"var _jsxFileName = \"D:\\\\study\\\\FullstackJS\\\\NJS301x_1.0-A_VN\\\\Assignments\\\\Assignment01\\\\FrontEnd\\\\src\\\\components\\\\search\\\\SearchResult.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"../../utils/axios\";\nimport requests from \"../../utils/requests\";\nimport \"./SearchResult.css\";\nconst base_url = \"https://image.tmdb.org/t/p/original\";\nconst SearchResult = ({\n  query\n}) => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const url = `${requests.fetchSearch}`;\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const request = await axios.post(url, {\n          keyword: query[0],\n          req_media_type: query[1],\n          req_language: query[2],\n          req_year: +query[3],\n          req_genre: +query[4]\n        }, {\n          headers: {\n            Authorization: \"8qlOkxz4wq\"\n          }\n        });\n        if (request.data.results.length === 0) {\n          setMovies([]);\n          setMessage(\"No movies found!\");\n        } else {\n          setMessage(\"\");\n          setMovies(request.data.results);\n        }\n        return request;\n      } catch (error) {\n        if (error.response && error.response.status === 400) {\n          setMovies([]);\n          setMessage(error.response.data.message);\n        } else {\n          console.error(`${error.response.data.message}`, error);\n        }\n      }\n    }\n    if (query) {\n      fetchData();\n    } else {\n      setMovies([]);\n    }\n  }, [url, query]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"Search Result\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row_posters search-resul-container sc2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, movies && movies.map(movie => {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      key: movie.id,\n      className: `row_poster row_posterLarge`,\n      src: `${base_url}${movie.poster_path}`,\n      alt: movie.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    });\n  })), message && /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }\n  }, message));\n};\n_s(SearchResult, \"zKZz1ToLhZof55wW29gLg0w7E+8=\");\n_c = SearchResult;\nexport default SearchResult;\nvar _c;\n$RefreshReg$(_c, \"SearchResult\");","map":{"version":3,"names":["React","useState","useEffect","axios","requests","base_url","SearchResult","query","_s","movies","setMovies","message","setMessage","url","fetchSearch","fetchData","request","post","keyword","req_media_type","req_language","req_year","req_genre","headers","Authorization","data","results","length","error","response","status","console","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","movie","key","id","src","poster_path","alt","name","_c","$RefreshReg$"],"sources":["D:/study/FullstackJS/NJS301x_1.0-A_VN/Assignments/Assignment01/FrontEnd/src/components/search/SearchResult.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport axios from \"../../utils/axios\";\nimport requests from \"../../utils/requests\";\n\nimport \"./SearchResult.css\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\n\nconst SearchResult = ({ query }) => {\n  const [movies, setMovies] = useState([]);\n  const [message, setMessage] = useState(\"\");\n\n  const url = `${requests.fetchSearch}`;\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const request = await axios.post(\n          url,\n          {\n            keyword: query[0],\n            req_media_type: query[1],\n            req_language: query[2],\n            req_year: +query[3],\n            req_genre: +query[4],\n          },\n          {\n            headers: { Authorization: \"8qlOkxz4wq\" },\n          }\n        );\n\n        if (request.data.results.length === 0) {\n          setMovies([]);\n          setMessage(\"No movies found!\");\n        } else {\n          setMessage(\"\");\n          setMovies(request.data.results);\n        }\n\n        return request;\n      } catch (error) {\n        if (error.response && error.response.status === 400) {\n          setMovies([]);\n          setMessage(error.response.data.message);\n        } else {\n          console.error(`${error.response.data.message}`, error);\n        }\n      }\n    }\n\n    if (query) {\n      fetchData();\n    } else {\n      setMovies([]);\n    }\n  }, [url, query]);\n\n  return (\n    <div className=\"row\">\n      <h2>Search Result</h2>\n      <div className=\"row_posters search-resul-container sc2\">\n        {movies &&\n          movies.map((movie) => {\n            return (\n              <img\n                key={movie.id}\n                className={`row_poster row_posterLarge`}\n                src={`${base_url}${movie.poster_path}`}\n                alt={movie.name}\n              />\n            );\n          })}\n      </div>\n      {message && <h3>{message}</h3>}\n    </div>\n  );\n};\n\nexport default SearchResult;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}